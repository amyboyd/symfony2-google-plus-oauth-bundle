<?php

namespace AW\Bundle\GooglePlusBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use AW\Bundle\GooglePlusBundle\Entity\User;

class DefaultController extends Controller
{
    /**
     * HTTP param: continue: where to redirect to after authenticating.
     */
    public function authAction(Request $request)
    {
        if (!$request->get('continue')) {
            throw new \AW\Bundle\GooglePlusBundle\Exception('No continue parameter in the request query string');
        }

        // The redirect URI must match what's set in the Google API console exactly,
        // so the 'continue' parameter must be stored in the session (instead of
        // stored in the query string like how the Twitter/Facebook APIs allow).
        $request->getSession()->set('aw_google_plus_continue', $request->get('continue'));

        return $this->redirect($this->createClient()->createAuthUrl());
    }

    /**
     * HTTP param: code: generated by Google+.
     * Session param: aw_google_plus_continue: where to redirect afterwards.
     */
    public function callbackAction(Request $request)
    {
        $continueURL = $request->getSession()->get('aw_google_plus_continue');
        if (!$continueURL) {
            throw new \AW\Bundle\GooglePlusBundle\Exception('No continue parameter in the session');
        }

        if (!$request->get('code')) {
            return $this->render('AWGooglePlusBundle:Default:fail.html.twig');
        }

        $client = $this->createClient();

        // Creating the PlusService must be done before authenticate().
        $plus = $this->createPlusService($client);

        // We have a temporary one-time-use access code. Use that to get a token.
        $client->authenticate($request->get('code'));

        // Save the person data.
        $personData = $plus->people->get('me');
        $personObj = $this->getDoctrine()->getRepository('AWGooglePlusBundle:User')->find($personData['id']);
        if ($personObj) {
            $personObj->updateWithNewData($personData);
        }
        else {
            $personObj = new User($personData);
        }
        $personObj->setToken($client->getAccessToken());
        $em = $this->getDoctrine()->getEntityManager();
        $em->persist($personObj);
        $em->flush();

        // Take the user back to the continue URL.
        $this->get('aw_google_plus')->setUserInSession($personObj);
        return $this->redirect($continueURL);
    }

    /**
     * @return \Google_Client
     */
    private function createClient()
    {
        require_once __DIR__ . '/../Lib/google-api-php-client/Google_Client.php';
        $client = new \Google_Client();
        $client->setApplicationName($this->container->getParameter('aw_google_plus.app_name'));
        $client->setClientId($this->container->getParameter('aw_google_plus.client_id'));
        $client->setClientSecret($this->container->getParameter('aw_google_plus.client_secret'));
        $client->setRedirectUri($this->generateUrl('aw_google_plus_callback', array(), true));
        $client->setDeveloperKey($this->container->getParameter('aw_google_plus.developer_key'));
        $client->setScopes(array('https://www.googleapis.com/auth/plus.me'));
        $client->setApprovalPrompt('auto');
        return $client;
    }

    /**
     * @param \Google_Client $client
     * @return \Google_PlusService
     */
    private function createPlusService(\Google_Client $client)
    {
        require_once __DIR__ . '/../Lib/google-api-php-client/contrib/Google_PlusService.php';
        return new \Google_PlusService($client);
    }
}
